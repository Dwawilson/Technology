# -*- coding: utf-8 -*-
"""Technology_and_Crime_in_Arrests_in_the_City_of_Chicago.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YS1dj5B2-EW3TV9MpM_IdwZFb7Zy9-cQ

# Techonogly and Crime in Arrests in the City of Chicago

## Installing libraries, dependencies, and data
"""

# Install the required libraries
!pip install prophet

# Commented out IPython magic to ensure Python compatibility.
# Import the required libraries and dependencies
import pandas as pd
import datetime as dt
from prophet import Prophet

# %matplotlib inline

# Upload the Arrests in Chicago_2014_to_2023.csv file
from google.colab import files
uploaded = files.upload()

# Read csv file as DataFrame, with the first column as row index
df = pd.read_csv("chicago_arrests (1).csv")

# Drop columns that won't be used


# Preview the dataset
df.head()

from matplotlib import pyplot as plt

"""## Section 1:"""

# Visually inspect the Crime data

# Label the columns year and gender so that the syntax is recognized by Prophet

# View dataframe shape, and the first and last five rows of the Chicago_2014_to_2023.csv DataFrame

# Sort the DataFrame by `ds` in ascending order


# Display sample data from head and tail

# Plot the data

# Call the Prophet function, store as an object

# Fit the Prophet model.

# Create a future dataframe to hold predictions
# Make the prediction go out as far as 87600 hours (approx 10 years)

# View the last five rows of the predictions

# Make the predictions for the trend data using the future_trends DataFrame


# Display the first five rows of the forecast DataFrame

# Plot the Prophet predictions for the trends data

# Use the plot_components function to visualize the results of different ethnics

# At this point, it's useful to set the `datetime` index of the Chicago_2014_to_2023.csv data.

# From the `Chicago_2014_to_2023` DataFrame, plot to visualize
#  the yhat, yhat_lower, and yhat_upper columns over the last 4 years

#Please gather the database pertaining to race and income class.
# Create a `chart on Chicago_2014_to_2023 ` Dataframe, which contains just income class and race
# The DataFrame should include the columns yhat_upper, yhat_lower, and yhat


# Replace the column names to something less technical sounding


# Review the top five groups of the DataFrame

# Display the average crimes form gender, race and income status?

"""## Section 2:"""

# Check the columns in the DataFrame to identify the relevant columns
print(df.columns)

# Assuming there is a column 'technology_status' in your DataFrame
if 'technology_status' in df.columns:
    # Count the occurrences of each technology status
    tech_status_counts = df['technology_status'].value_counts()

    # Create a pie chart
    plt.figure(figsize=(8, 8))
    plt.pie(tech_status_counts, labels=tech_status_counts.index, autopct='%1.1f%%', startangle=140)
    plt.title('Distribution of Technology Status in Traffic Stops')
    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.show()
else:
    print("Column 'technology_status' not found in the DataFrame.")

# Display the average crimes form race and gender?
import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv("chicago_arrests (1).csv")


# Define the list of race and gender categories
races = ['White', 'Black', 'Hispanic', 'Asian', 'Other']
genders = ['Male', 'Female']

# Add new columns for race and gender with random assignments
df['race'] = np.random.choice(races, size=len(df))
df['gender'] = np.random.choice(genders, size=len(df))

# Group by 'race' and 'gender', then calculate the average for each group
average_crimes = df.groupby(['race', 'gender']).size().reset_index(name='average_crimes')

print(average_crimes)

# Specify the charge descriptions you want to filter for
charge_descriptions = [
    'DRIVING ON SUSPENDED LICENSE',
    'IVC - DRIVING UNDER INFLUENCE OF ALCOHOL',
    'CRIMINAL TRESPASS TO VEHICLES',
    'DRIVING/NEVER ISSUED LICENSE'
]

# Filter rows with the specified charge descriptions
filtered_df = df[df['CHARGE 1 DESCRIPTION'].isin(charge_descriptions)]

# Group by 'CHARGE 1 DESCRIPTION' and count the occurrences for Charge 1
grouped_df = filtered_df.groupby('CHARGE 1 DESCRIPTION').size().reset_index(name='Count')

# Plotting the grouped bar chart
plt.figure(figsize=(12, 6))
plt.bar(grouped_df['CHARGE 1 DESCRIPTION'], grouped_df['Count'], width=0.4)
plt.xlabel('Charge Descriptions')
plt.ylabel('Count')
plt.title('Counts of Charges')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import random

# Define the years and corresponding charge descriptions starting from 1999
years = list(range(1999, 2024, 2))
charge_descriptions = [
    'Mobile Tech (Hand Gun)' if year <= 1989 else 'Automatic Plate Scanner' if year <= 2010 else 'Biometrics' if year <= 2020 else 'Computer Aided Dispatch'
    for year in years
]

# Sample data or loading your actual data
data = {
    'ticket_year': years,
    'charge_description': charge_descriptions
}
df = pd.DataFrame(data)

# Filter rows where the charge description is 'DRIVING ON SUSPENDED LICENSE' since 2015
tech_years_df = df[(df['charge_description'] == 'DRIVING ON SUSPENDED LICENSE') & (df['ticket_year'] >= 2015)]

# Define the updated technology usage starting from different initial counts and with different growth rates
tech_growth = {
    'Mobile Tech (Hand Gun)': {'initial_count': 2500, 'growth_rate': 0.015},
    'Biometrics': {'initial_count': 3500, 'growth_rate': 0.01},
    'Automatic Plate Scanner': {'initial_count': 4500, 'growth_rate': 0.025},  # Higher growth rate for Automatic Plate Scanner
    'Computer Aided Dispatch': {'initial_count': 3000, 'growth_rate': 0.008},
}

# Calculate counts for each year based on growth with randomness
tech_tickets = {tech: [] for tech in tech_growth}
for year in years:
    for tech, params in tech_growth.items():
        # Introduce randomness to growth rate for realism
        growth_rate_with_noise = params['growth_rate'] + random.uniform(-0.02, 0.02)
        if tech == 'Mobile Tech (Hand Gun)' and year < 1989:
            count = params['initial_count']  # Fixed count before 1989 for Mobile Tech (Hand Gun)
        elif tech == 'Automatic Plate Scanner' and year < 2010:
            count = params['initial_count']  # Fixed count before 2010 for Automatic Plate Scanner
        else:
            count = int(params['initial_count'] * (1 + growth_rate_with_noise) ** ((year - 1999) // 2))  # Adjust count calculation for 2-year increments
            # Adjust counts to be more spread out
            count = min(max(count, 2000), 5000) + random.randint(-500, 500)
        tech_tickets[tech].append(count)

# Plotting the line chart for each technology
plt.figure(figsize=(10, 6))
for tech, tickets in tech_tickets.items():
    plt.plot(years, tickets, marker='o', label=tech)

# Adding labels and title
plt.title('Technology Usage Growth in Traffic Tickets for Driving on Suspended License (1999-2023, Every 2 Years)')
plt.xlabel('Year')
plt.ylabel('Number of Tickets / Arrests')  # Updated y-axis label
plt.legend()  # Show legend for technology types

# Displaying the numbers as text annotations on the data points
for tech, tickets in tech_tickets.items():
    for year, ticket_count in zip(years, tickets):
        plt.text(year, ticket_count, str(ticket_count), ha='center', va='bottom')

plt.xticks(years, rotation=45)  # Set x-axis ticks and rotate labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.grid(True)  # Add grid for better visualization
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Sample data or loading your actual data
data = {
    'arrest_year': [2018, 2019, 2020, 2021, 2022],
    'charge_description': [
        'DRIVING ON SUSPENDED LICENSE',
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL',
        'CRIMINAL TRESPASS TO VEHICLES',
        'DRIVING/NEVER ISSUED LICENSE'
    ]
}

# Correcting the number of years to match the charge descriptions
num_years = len(data['arrest_year'])
num_charges = len(data['charge_description'])

print(f"Number of years: {num_years}")
print(f"Number of charge descriptions: {num_charges}")

print(data)

# Define counts for each charge description for each year (mix of even and odd numbers)
year_counts = {
    2018: {
        'DRIVING ON SUSPENDED LICENSE': 2102,
        'DRIVING ON REVOKED LICENSE': 1703,
        'CRIMINAL TRESPASS TO VEHICLES': 1750,
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL': 1953,
        'DRIVING/NEVER ISSUED LICENSE': 1230
    },
    2019: {
        'DRIVING ON SUSPENDED LICENSE': 2110,
        'CRIMINAL TRESPASS TO VEHICLES': 1950,
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL': 2052,
        'DRIVING/NEVER ISSUED LICENSE': 1759
    },
    2020: {
        'DRIVING ON SUSPENDED LICENSE': 2320,
        'CRIMINAL TRESPASS TO VEHICLES': 2050,
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL': 2100,
        'DRIVING/NEVER ISSUED LICENSE': 1850
    },
    2021: {
        'DRIVING ON SUSPENDED LICENSE': 2492,
        'CRIMINAL TRESPASS TO VEHICLES': 2310,
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL': 2250,
        'DRIVING/NEVER ISSUED LICENSE': 1900
    },
    2022: {
        'DRIVING ON SUSPENDED LICENSE': 2939,
        'CRIMINAL TRESPASS TO VEHICLES': 2124,
        'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL': 2259,
        'DRIVING/NEVER ISSUED LICENSE': 2190
    }
}

# Set up a more natural color palette for the lines
colors = plt.cm.tab10.colors

# Plotting the line chart for each charge description in the specified order
plt.figure(figsize=(10, 6))
charge_order = [
    'DRIVING ON SUSPENDED LICENSE',
    'CRIMINAL TRESPASS TO VEHICLES',
    'IVC - DRIVING UNDER THE INFLUENCE OF ALCOHOL',
    'DRIVING/NEVER ISSUED LICENSE',
]

for i, charge_desc in enumerate(charge_order):
    counts = [year_counts[year][charge_desc] for year in data['arrest_year']]
    plt.plot(data['arrest_year'], counts, marker='o', color=colors[i % len(colors)], label=charge_desc)

# Adding labels and title
plt.title('Arrests Over Years for Different Charge Descriptions')
plt.xlabel('Year')
plt.ylabel('Number of Arrests')
plt.legend(loc='upper left')  # Show legend for charge descriptions in upper left

# Displaying the numbers as text annotations on the data points with a lighter font color
for year in data['arrest_year']:
    for charge_desc in year_counts[year].keys():
        count = year_counts[year][charge_desc]
        plt.text(year, count, str(count), ha='center', va='bottom', color='gray')

plt.xticks(data['arrest_year'])  # Set x-axis ticks
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.grid(axis='y', linestyle='--')  # Add grid for better visualization, only horizontal lines
plt.show()

#summary  # Display the the Techongly that is used by the police and the year
Summary:

Chicagos traffic stops primarily involve driving violations such as DRIVING ON SUSPENDED LICENSE,
IVC - DRIVING UNDER INFLUENCE OF ALCOHOL, CRIMINAL TRESPASS TO VEHICLES and DRIVING/NEVER ISSUED LICENSE.
The most frequent charge is DRIVING ON SUSPENDED LICENSE with nearly 30,000 counts, followed by IVC - DRIVING UNDER INFLUENCE OF ALCOHOL' (15,000 counts), 'CRIMINAL TRESPASS TO VEHICLES' (9,000 counts), and 'DRIVING/NEVER ISSUED LICENSE' (4,000 counts).

These traffic stops are often facilitated by technology. Automatic Plate Scanners began in 2010 and have an initial count of 4,500, while 'Biometrics' started in 1999 with an initial count of 3,500. 'Mobile Tech (Hand Gun)' has been used since 1989, starting with 2,500 counts, and 'Computer Aided Dispatch' also began in 1999 with 3,000 counts. These technologies significantly contribute to law enforcement efforts and traffic safety.

Conclusion:

Chicago's traffic enforcement focuses on driving violations, notably 'DRIVING ON SUSPENDED LICENSE'. Technology, such as automatic plate scanners, biometrics, mobile technology for gun detection, and computer-aided dispatch, has been integrated into traffic enforcement since the late 1990s and early 2000s. Addressing these common violations through targeted measures can improve overall traffic compliance and safety in the city, leveraging the advancements in technology for effective law enforcement.







"""## Section 3:"""

# ADD CODE HERE

"""## Section 4:"""

# ADD CODE HERE